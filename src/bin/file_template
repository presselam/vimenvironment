#!/usr/bin/perl

use strict;
use Text::Template;
use Perl6::Slurp;

my %INFO = (
    FILENAME      => $ARGV[0] || "NAME",
    'MODULE NAME' => $ARGV[0] || "MODULE::NAME",
    'RT NAME'     => $ARGV[0] || "MODULE-NAME",
    AUTHOR        => 'Andrew Pressel',
    EMAIL         => 'apressel@nextgenfed.com',
    YEAR => 1900 + (localtime)[5],
    DATE => join('-', 1900 + (localtime)[5],(localtime)[4],(localtime)[3]),
);

my %dispatch = (
    '.sh'  => sub { scalar slurp( "$ENV{'HOME'}/.templates/bash" ) },
    '.pl'  => sub { scalar slurp( "$ENV{'HOME'}/.templates/perlscript" ) },
    '.pm'  => sub { scalar slurp( "$ENV{'HOME'}/.templates/perlmodule" ) },
    '.py' => sub { scalar slurp( "$ENV{'HOME'}/.templates/pyscript" ) },
    'pom.xml' => sub{ scalar slurp("$ENV{'HOME'}/.templates/pomxml") },
    'Pipfile' => sub{ scalar slurp("$ENV{'HOME'}/.templates/pipfile") },
);

my $SUFFIX = q{([.][^.]+)\Z};

main();
exit(0);

sub main {

    clean();

    my ($type) = $INFO{FILENAME} =~ m{$SUFFIX};

    my $subref = $dispatch{$type} || $dispatch{$INFO{'FILENAME'}};
    exit() unless( $subref );
    print( filled_in( $subref->() ) );
}

sub filled_in {
    my ($str) = @_;
    my $placeholder = join '|', map {"\Q$_\E"} reverse sort keys %INFO;
    $str =~ s/<($placeholder)>/$INFO{$1}/g;
    return $str;
}

sub clean {

    for ( $INFO{'FILENAME'} ) {
        s{^.*/lib/}{}g;
        s{^lib/}{}g;
    }

    for ( $INFO{'MODULE NAME'} ) {
        s{$SUFFIX}{};
        s{/}{::}g;
        s{^.*::lib::}{}g;
        s{^lib::}{}g;
    }

    for ( $INFO{'MODULE NAME'} ) {
        s{$SUFFIX}{};
        s{/}{::}g;
        s{^.*::lib::}{}g;
        s{^lib::}{}g;
    }

    for ( $INFO{'RT NAME'} ) {
        s{$SUFFIX}{};
        s{/}{-}g;
        s{^.*-lib-}{}g;
        s{^lib-}{}g;
        tr/A-Z/a-z/;
    }
}
